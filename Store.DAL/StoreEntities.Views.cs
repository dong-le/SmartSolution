//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Store.DAL.StoreEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets4b95a978abecad020a59a4e44c39f4d2d306abd735fc1c21281ed4531a31fa82))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets4b95a978abecad020a59a4e44c39f4d2d306abd735fc1c21281ed4531a31fa82 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "4b95a978abecad020a59a4e44c39f4d2d306abd735fc1c21281ed4531a31fa82"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "StoreStoreContainer.Categories")
            {
                return GetView0();
            }

            if (extentName == "StoreStoreContainer.Gadgets")
            {
                return GetView1();
            }

            if (extentName == "StoreEntities.Categories")
            {
                return GetView2();
            }

            if (extentName == "StoreEntities.Gadgets")
            {
                return GetView3();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for StoreStoreContainer.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [Store.Store.Categories](T1.Categories_CategoryID, T1.Categories_Name, T1.Categories_DateCreated, T1.Categories_DateUpdated)
    FROM (
        SELECT 
            T.CategoryID AS Categories_CategoryID, 
            T.Name AS Categories_Name, 
            T.DateCreated AS Categories_DateCreated, 
            T.DateUpdated AS Categories_DateUpdated, 
            True AS _from0
        FROM StoreEntities.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StoreStoreContainer.Gadgets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Gadgets
        [Store.Store.Gadgets](T1.Gadgets_GadgetID, T1.Gadgets_Name, T1.Gadgets_Description, T1.Gadgets_Price, T1.Gadgets_Image, T1.Gadgets_CategoryID)
    FROM (
        SELECT 
            T.GadgetID AS Gadgets_GadgetID, 
            T.Name AS Gadgets_Name, 
            T.Description AS Gadgets_Description, 
            T.Price AS Gadgets_Price, 
            T.Image AS Gadgets_Image, 
            T.CategoryID AS Gadgets_CategoryID, 
            True AS _from0
        FROM StoreEntities.Gadgets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StoreEntities.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [Store.Category](T1.Category_CategoryID, T1.Category_Name, T1.Category_DateCreated, T1.Category_DateUpdated)
    FROM (
        SELECT 
            T.CategoryID AS Category_CategoryID, 
            T.Name AS Category_Name, 
            T.DateCreated AS Category_DateCreated, 
            T.DateUpdated AS Category_DateUpdated, 
            True AS _from0
        FROM StoreStoreContainer.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for StoreEntities.Gadgets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Gadgets
        [Store.Gadget](T1.Gadget_GadgetID, T1.Gadget_Name, T1.Gadget_Description, T1.Gadget_Price, T1.Gadget_Image, T1.Gadget_CategoryID)
    FROM (
        SELECT 
            T.GadgetID AS Gadget_GadgetID, 
            T.Name AS Gadget_Name, 
            T.Description AS Gadget_Description, 
            T.Price AS Gadget_Price, 
            T.Image AS Gadget_Image, 
            T.CategoryID AS Gadget_CategoryID, 
            True AS _from0
        FROM StoreStoreContainer.Gadgets AS T
    ) AS T1");
        }
    }
}
